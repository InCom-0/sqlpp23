# Copyright (c) 2013 - 2021, Roland Bock
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


function(create_test name)
    set(target sqlpp23_sqlite3_usage_${name})
    add_executable(${target} ${name}.cpp)
    sqlpp_slite3_test_add_target_link_libraries(${target})
    add_test(NAME ${target} COMMAND ${target})
endfunction()

create_test(aggregate_functions)
create_test(exists)

set(test_files
    DateTime.cpp
    Sample.cpp
    Select.cpp
    Union.cpp
    With.cpp
    Attach.cpp
    DynamicSelect.cpp
    AutoIncrement.cpp
    Transaction.cpp
    FloatingPoint.cpp
    Integral.cpp
    Blob.cpp
    Connection.cpp
    ConnectionPool.cpp
    Execute.cpp
)

create_test_sourcelist(test_sources test_main.cpp ${test_files})

add_executable(sqlpp23_sqlite3_tests ${test_sources})
target_link_libraries(sqlpp23_sqlite3_tests PRIVATE sqlpp23_testing sqlpp23_sqlite3_testing)
if (BUILD_SQLCIPHER_CONNECTOR)
    target_link_libraries(sqlpp23_sqlite3_tests PRIVATE sqlpp23::sqlcipher)
    if (SQLPP_DYNAMIC_LOADING)
        target_include_directories(sqlpp23_sqlite3_tests PRIVATE ${SQLCIPHER_INCLUDE_DIRS})
    endif()
else()
    target_link_libraries(sqlpp23_sqlite3_tests PRIVATE sqlpp23::sqlite3)
endif()

foreach(test_file IN LISTS test_files)
    get_filename_component(test ${test_file} NAME_WLE)
    add_test(NAME sqlpp23.sqlite3.usage.${test}
        COMMAND sqlpp23_sqlite3_tests ${test}
    )
endforeach()

# the dynamic loading test needs the extra option "SQLPP_DYNAMIC_LOADING" and does NOT link the sqlite libs
if (SQLPP_DYNAMIC_LOADING)
    add_executable(Sqlpp23Sqlite3DynamicLoadingTest "DynamicLoadingTest.cpp" ${sqlpp_headers})
    target_link_libraries(Sqlpp23Sqlite3DynamicLoadingTest sqlpp23-connector-sqlite3-dynamic)
    if (NOT MSVC)
        target_link_libraries(Sqlpp23Sqlite3DynamicLoadingTest dl)
        target_compile_options(Sqlpp23Sqlite3DynamicLoadingTest INTERFACE -Wall -Wextra -pedantic)
    endif ()
    add_test(NAME Sqlpp23Sqlite3DynamicLoadingTest COMMAND Sqlpp23Sqlite3DynamicLoadingTest)
endif()
